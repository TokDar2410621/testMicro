sudo apt-get update
sudo apt-get install python3-pip
pip3 install spidev


sudo raspi-config


import spidev
import time

# Initialiser SPI
spi = spidev.SpiDev()
spi.open(0, 0)  # Bus 0, Device 0
spi.max_speed_hz = 1350000

def read_adc(channel):
    """
    Lire une valeur du MCP3008
    channel : 0-7 (canal à lire)
    """
    if channel < 0 or channel > 7:
        return -1
    
    # Commande pour lire le canal
    adc = spi.xfer2([1, (8 + channel) << 4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

try:
    print("Lecture du microphone (Ctrl+C pour arrêter)")
    while True:
        # Lire le canal 0 (microphone)
        valeur = read_adc(0)
        
        # Convertir en voltage (0-3.3V)
        voltage = (valeur * 3.3) / 1023
        
        print(f"Valeur brute: {valeur:4d} | Voltage: {voltage:.2f}V", end='\r')
        
        time.sleep(0.1)
        
except KeyboardInterrupt:
    print("\nArrêt du programme")
    spi.close()

Code pour détecter un seuil sonore


import spidev
import time

spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1350000

def read_adc(channel):
    adc = spi.xfer2([1, (8 + channel) << 4, 0])
    data = ((adc[1] & 3) << 8) + adc[2]
    return data

# Calibration : valeur au repos
print("Calibration... restez silencieux")
valeurs_repos = []
for i in range(100):
    valeurs_repos.append(read_adc(0))
    time.sleep(0.01)

valeur_repos = sum(valeurs_repos) // len(valeurs_repos)
seuil = 50  # Ajustez selon vos besoins

print(f"Valeur de repos: {valeur_repos}")
print(f"Seuil de détection: {seuil}")
print("Détection en cours...")

try:
    while True:
        valeur = read_adc(0)
        difference = abs(valeur - valeur_repos)
        
        if difference > seuil:
            print(f"Son détecté! Intensité: {difference}")
        
        time.sleep(0.01)
        
except KeyboardInterrupt:
    print("\nArrêt")
    spi.close()


*----------------------------

import spidev
import time

spi = spidev.SpiDev()

try:
    spi.open(0, 0)
    spi.max_speed_hz = 1350000
    print("✓ SPI ouvert avec succès")
    
    # Test de lecture
    for i in range(10):
        adc = spi.xfer2([1, (8 + 0) << 4, 0])
        data = ((adc[1] & 3) << 8) + adc[2]
        print(f"Lecture {i+1}: {data}")
        time.sleep(0.5)
    
    spi.close()
    
except Exception as e:
    print(f"✗ Erreur: {e}")
-----------------------------------
import spidev
import time

spi = spidev.SpiDev()
spi.open(0, 0)
spi.max_speed_hz = 1350000

print("Test de tous les canaux du MCP3008...")
print("Si tout est à 0, problème d'alimentation")
print("Si certains canaux montrent 1023, c'est mieux!\n")

for canal in range(8):
    adc = spi.xfer2([1, (8 + canal) << 4, 0])
    valeur = ((adc[1] & 3) << 8) + adc[2]
    print(f"Canal {canal}: {valeur}")

spi.close()
```

## Solution : Vérification des connexions critiques

Vérifiez **CES CONNEXIONS EN PRIORITÉ** :

### 1. Alimentation du MCP3008 (CRITIQUE)

Refaites ces connexions en vous assurant que les fils sont bien enfoncés :
```
Rail + (3.3V) → MCP3008 broche 16 (VDD)
Rail + (3.3V) → MCP3008 broche 15 (VREF)
```

**Astuce :** Essayez de déplacer le MCP3008 d'une ligne sur la breadboard. Parfois certains trous sont usés.

### 2. Masse du MCP3008
```
Rail - (GND) → MCP3008 broche 14 (AGND)
Rail - (GND) → MCP3008 broche 9 (DGND)
```

### 3. Test simple : Connectez CH0 au 3.3V

**Débranchez temporairement le microphone** et connectez :
```
Rail + (3.3V) → MCP3008 broche 1 (CH0)


///----------------------------------/////////

import RPi.GPIO as GPIO
import time

# Test des broches GPIO en sortie
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)

print("Test GPIO17 - Une LED devrait clignoter si connectée")
for i in range(5):
    GPIO.output(17, GPIO.HIGH)
    print(f"GPIO17 HIGH ({i+1}/5)")
    time.sleep(0.5)
    GPIO.output(17, GPIO.LOW)
    print(f"GPIO17 LOW ({i+1}/5)")
    time.sleep(0.5)

GPIO.cleanup()
print("Test terminé")

/***********************************************/

import spidev
import time

print("=== Test diagnostic MCP3008 ===\n")

# Test 1: Ouverture SPI
try:
    spi = spidev.SpiDev()
    spi.open(0, 0)
    spi.max_speed_hz = 1350000
    print("✓ SPI ouvert avec succès")
except Exception as e:
    print(f"✗ Erreur SPI: {e}")
    exit()

# Test 2: Lecture de tous les canaux
print("\nLecture de tous les canaux (0-7):")
for canal in range(8):
    adc = spi.xfer2([1, (8 + canal) << 4, 0])
    valeur = ((adc[1] & 3) << 8) + adc[2]
    print(f"  Canal {canal}: {valeur:4d}")

# Test 3: Lecture répétée du canal 0
print("\n10 lectures du canal 0 (microphone):")
for i in range(10):
    adc = spi.xfer2([1, (8 + 0) << 4, 0])
    valeur = ((adc[1] & 3) << 8) + adc[2]
    print(f"  Lecture {i+1}: {valeur:4d}")
    time.sleep(0.2)

spi.close()

print("\n=== Diagnostic ===")
print("Si TOUS les canaux = 0 : Problème d'alimentation VDD/VREF")
print("Si TOUS les canaux = 1023 : Problème de masse (GND)")
print("Si valeurs aléatoires : MCP3008 fonctionne !")
